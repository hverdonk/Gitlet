This project was an exercise to recreate a simple version of the version control system Git. In this version, a commit object contains only a log message, timestamp, a mapping of file names to blob references, and a single parent reference.


Command Syntax: java gitlet.Main <args>


Arguments:

init              Initializes gitlet in the current directory
log               Displays the commit history, starting at the current head commit and proceeding back in time along the branch.
global-log        Displays information about all commits ever made, in no particular order.
status            Displays what branches currently exist, and marks the current branch with a *. Also displays what files have been staged 
                  or marked for untracking.
add <file>        Adds a copy of <file> as it currently exists to the stage, so it will be included in the next commit. Cannot process  
                  subdirectories.
rm <file>         Removes the copy of <file> from the stage, so it will not be included in the next commit. Also removes the file from the 
                  working directory if it was tracked in the latest commit. Cannot process subdirectories.
commit <message>  Stores a snapshot of every file in the current commit and staging area so that they can be restored at a later time. 
                  Must include a commit message.
find <message>    Prints out the ids of all commits that have the given commit message, one per line.
checkout <file>   Puts the version of <file> that exists in the head commit in the working directory, overwriting any other version.
checkout <branch> Takes all files in the commit at the head of the given branch, and puts them in the working directory, overwriting any 
                  other version of those files. Any files that are tracked in the current branch but are not present in the checked-out 
                  branch are deleted. <branch> becomes the current branch.  
checkout <commit id> <file>   Takes the version of the file as it exists in the commit with the given id, and puts it in the working 
                              directory, overwriting the version of the file that's already there if there is one.
branch <name>     Creates a branch in the commit tree.
rm-branch <name>  Removes a branch, but not any commits created in that branch.
reset <commit id> Essentially performs the checkout command on an arbitrary commit corresponding to <commit id>. Also changes the current 
                  branch head to that commit node.



